/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/java_library_plugin.html
 */

/****
// Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}
****/

apply plugin: 'java'
apply plugin: 'application'

mainClassName = 'Main'
sourceCompatibility = 1.8
targetCompatibility = 1.8
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.google.api-client:google-api-client:1.22.0'

    // Gradle: Override transitive dependency (it uses old servlet-api:2.5 and we want serlet 3)
    compile ("com.google.oauth-client:google-oauth-client-jetty:1.22.0"){
        exclude group: 'org.mortbay.jetty', module: 'servlet-api'
    }

    compile 'com.google.apis:google-api-services-drive:v3-rev71-1.22.0'

    compile 'com.sparkjava:spark-core:2.3'

	compile group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.5'

	compile group: 'com.amazonaws', name: 'aws-java-sdk-s3', version: '1.11.123'

	compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

}

jar {
  manifest {
    attributes(
      'Class-Path': configurations.compile.collect { it.getName() }.join(' '),
      'Main-Class': 'com.whenhub.importer.Main'
    )
  }
}

task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Whenhub Importer',
        	'Implementation-Version': version,
        	'Main-Class': 'com.whenhub.importer.Main'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

// stage task is for deploying on Heroku
task stage(dependsOn: ['build', 'fatJar', 'clean'])
build.mustRunAfter clean

